/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timetablemanagementsystem_we_r_05;

import Database.Database;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Ravini
 */
public class Sessions_allocations extends javax.swing.JPanel {

   PreparedStatement pst;
   Connection conl;
    /**
     * Creates new form Sessions
     */
    public Sessions_allocations() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        consecutive_table = new javax.swing.JTable();
        jButton1ClearConsecutiveSessions = new javax.swing.JButton();
        jButtonSave_consecutive = new javax.swing.JButton();
        LoadSessions1 = new javax.swing.JButton();
        tranfer_Consecutive_rows = new javax.swing.JButton();
        delete_selectedRow = new javax.swing.JButton();
        session_id = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Parallel_1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_parallel_2 = new javax.swing.JTable();
        jButtonLoadSessions = new javax.swing.JButton();
        AddSelectedPaSession = new javax.swing.JButton();
        jButtonDeleteSelected_Parallel = new javax.swing.JButton();
        jButtonClear_Parallel = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextFieldParallel = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableNotOverlapping_1 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableNotOverlapping_2 = new javax.swing.JTable();
        jButtonload_not_overlapping = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldSession = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButtonLoadConsecutive_sessions = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableConsSessions = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableParallelSessions = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jButtonload_parallelSessions = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableNotoverlapping = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1214, 771));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("                   Consecutive sessions");
        jLabel1.setPreferredSize(new java.awt.Dimension(384, 24));

        consecutive_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration"
            }
        ));
        jScrollPane2.setViewportView(consecutive_table);

        jButton1ClearConsecutiveSessions.setText("Clear consecutive sessions");
        jButton1ClearConsecutiveSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ClearConsecutiveSessionsActionPerformed(evt);
            }
        });

        jButtonSave_consecutive.setText("Save consecutive sessions");
        jButtonSave_consecutive.setPreferredSize(new java.awt.Dimension(185, 25));
        jButtonSave_consecutive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSave_consecutiveActionPerformed(evt);
            }
        });

        LoadSessions1.setText("Load sessions");
        LoadSessions1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadSessions1ActionPerformed(evt);
            }
        });

        tranfer_Consecutive_rows.setText("Add selected session");
        tranfer_Consecutive_rows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tranfer_Consecutive_rowsActionPerformed(evt);
            }
        });

        delete_selectedRow.setText("Delete selected rows");
        delete_selectedRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_selectedRowActionPerformed(evt);
            }
        });

        session_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                session_idActionPerformed(evt);
            }
        });

        jLabel5.setText("Enter session id");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tranfer_Consecutive_rows, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1ClearConsecutiveSessions, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jButtonSave_consecutive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete_selectedRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LoadSessions1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(session_id)
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(session_id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LoadSessions1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(tranfer_Consecutive_rows, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(delete_selectedRow, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton1ClearConsecutiveSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jButtonSave_consecutive, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        jTabbedPane1.addTab("Consecutive", jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("                    Parallel  sessions");
        jLabel2.setPreferredSize(new java.awt.Dimension(384, 24));

        jTable_Parallel_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration"
            }
        ));
        jScrollPane3.setViewportView(jTable_Parallel_1);

        jTable_parallel_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration"
            }
        ));
        jScrollPane4.setViewportView(jTable_parallel_2);

        jButtonLoadSessions.setText("Load Session");
        jButtonLoadSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadSessionsActionPerformed(evt);
            }
        });

        AddSelectedPaSession.setText("Add selected session");
        AddSelectedPaSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSelectedPaSessionActionPerformed(evt);
            }
        });

        jButtonDeleteSelected_Parallel.setText("Delete selected rows");
        jButtonDeleteSelected_Parallel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteSelected_ParallelActionPerformed(evt);
            }
        });

        jButtonClear_Parallel.setText("Clear Parallel session");
        jButtonClear_Parallel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClear_ParallelActionPerformed(evt);
            }
        });

        jButton4.setText("Add Parallel sessions");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextFieldParallel.setPreferredSize(new java.awt.Dimension(6, 22));

        jLabel8.setText("Session id");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonDeleteSelected_Parallel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonClear_Parallel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonLoadSessions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AddSelectedPaSession, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                .addComponent(jTextFieldParallel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel8)
                        .addGap(30, 30, 30)
                        .addComponent(jTextFieldParallel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jButtonLoadSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(AddSelectedPaSession, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonDeleteSelected_Parallel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButtonClear_Parallel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))))
        );

        jTabbedPane1.addTab("Parallel", jPanel2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("                Not overlapping  sessions");
        jLabel3.setPreferredSize(new java.awt.Dimension(384, 24));

        jTableNotOverlapping_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration"
            }
        ));
        jScrollPane5.setViewportView(jTableNotOverlapping_1);

        jTableNotOverlapping_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration"
            }
        ));
        jScrollPane6.setViewportView(jTableNotOverlapping_2);

        jButtonload_not_overlapping.setText("Load sessions");
        jButtonload_not_overlapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonload_not_overlappingActionPerformed(evt);
            }
        });

        jButton3.setText("Add selected session");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete selected row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Clear Not overlapping sessions");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Add Not overlapping sessions");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel9.setText("Session id");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(444, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(381, 381, 381))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addGap(70, 70, 70)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonload_not_overlapping, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldSession))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonload_not_overlapping, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Not overlapping", jPanel3);

        jButtonLoadConsecutive_sessions.setText("Load Consecutive sessions");
        jButtonLoadConsecutive_sessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadConsecutive_sessionsActionPerformed(evt);
            }
        });

        jTableConsSessions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration", "session_id"
            }
        ));
        jScrollPane7.setViewportView(jTableConsSessions);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("             View consecutive  sessions");
        jLabel4.setPreferredSize(new java.awt.Dimension(384, 24));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(120, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(398, 398, 398))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jButtonLoadConsecutive_sessions, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(364, 364, 364))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 984, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(jButtonLoadConsecutive_sessions, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View cosecutive sessions", jPanel4);

        jTableParallelSessions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration", "session_id"
            }
        ));
        jScrollPane8.setViewportView(jTableParallelSessions);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("                View parallel  sessions");
        jLabel6.setPreferredSize(new java.awt.Dimension(384, 24));

        jButtonload_parallelSessions.setText("Load parallel sessions");
        jButtonload_parallelSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonload_parallelSessionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(409, 409, 409))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(419, 419, 419)
                .addComponent(jButtonload_parallelSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(jButtonload_parallelSessions, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View parallel sessions", jPanel5);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("                View Not overlapping sessions");
        jLabel7.setPreferredSize(new java.awt.Dimension(384, 24));

        jTableNotoverlapping.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lecturer 2", "Sub_code", "Subject", "Tag", "Group id", "Stu_count", "Duration", "SessionId"
            }
        ));
        jScrollPane9.setViewportView(jTableNotoverlapping);

        jButton1.setText("Load not overlappins sessions");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 984, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 103, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(370, 370, 370))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(390, 390, 390))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View not overlapping sessions", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void LoadSessions1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadSessions1ActionPerformed
        // TODO add your handling code here:
        try{
        
            ResultSet rs= Database.getData("Select * from session");
            DefaultTableModel tm = (DefaultTableModel)jTable1.getModel();
            tm.setRowCount(0);
            
            
             Object[] column = new Object[9];
            while(rs.next()){
                
             
             column[0] = rs.getInt("id");
             column[1] =  rs.getString("lecturer_1");
             column[2] =  rs.getString("lecturer_2");
             column[3] =  rs.getString("subject_code");
             column[4] =  rs.getString("subject");
             column[5] =  rs.getString("tag");
             column[6] =  rs.getString("group_id");
             column[7] =  rs.getString("student_count");
             column[8] =  rs.getString("duration");
             
           
             tm.addRow(column);
            }
      
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
            System.out.println(e);
            }
    }//GEN-LAST:event_LoadSessions1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void tranfer_Consecutive_rowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tranfer_Consecutive_rowsActionPerformed
        // TODO add your handling code here:
        TableModel model = jTable1.getModel();
        int[] indexes = jTable1.getSelectedRows();
        Object[] row = new Object[9];
         DefaultTableModel tm = (DefaultTableModel)consecutive_table.getModel();
         
         for (int i = 0; i < indexes.length; i++){
             row[0] = model.getValueAt(indexes[i], 0);
             row[1] = model.getValueAt(indexes[i], 1);
             row[2] = model.getValueAt(indexes[i], 2);
             row[3] = model.getValueAt(indexes[i], 3);
             row[4] = model.getValueAt(indexes[i], 4);
             row[5] = model.getValueAt(indexes[i], 5);
             row[6] = model.getValueAt(indexes[i], 6);
             row[7] = model.getValueAt(indexes[i], 7);
             row[8] = model.getValueAt(indexes[i], 8);
             tm.addRow(row);        
         }
        
    }//GEN-LAST:event_tranfer_Consecutive_rowsActionPerformed
//clear consecutive sessions
    private void jButton1ClearConsecutiveSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ClearConsecutiveSessionsActionPerformed
        // TODO add your handling code here:
        
        consecutive_table.setModel(new DefaultTableModel(null,new String[]{"ID","Lecturer 1","Lecturer 2","Sub_code","Subject","Tag","Group id","Stu_count","Duration"}));
    }//GEN-LAST:event_jButton1ClearConsecutiveSessionsActionPerformed
//Delete selected(Consecutive) row from the table
    private void delete_selectedRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_selectedRowActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel)consecutive_table.getModel();
        //get indexes of selected rows
        try{
           int rowIndex = consecutive_table.getSelectedRow();
           if(rowIndex == -1){
               JOptionPane.showMessageDialog(this,"Plese select row before delete");
           }else{
           model.removeRow(rowIndex);
           }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
    }//GEN-LAST:event_delete_selectedRowActionPerformed

    private void jButtonLoadSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadSessionsActionPerformed
        // TODO add your handling code here:
         try{
        
            ResultSet rs= Database.getData("Select * from session");
            DefaultTableModel tm = (DefaultTableModel)jTable_Parallel_1.getModel();
            tm.setRowCount(0);
            
            
             Object[] column = new Object[9];
            while(rs.next()){
                
             
             column[0] = rs.getInt("id");
             column[1] =  rs.getString("lecturer_1");
             column[2] =  rs.getString("lecturer_2");
             column[3] =  rs.getString("subject_code");
             column[4] =  rs.getString("subject");
             column[5] =  rs.getString("tag");
             column[6] =  rs.getString("group_id");
             column[7] =  rs.getString("student_count");
             column[8] =  rs.getString("duration");
             
           
             tm.addRow(column);
            }
      
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
            System.out.println(e);
            }
    }//GEN-LAST:event_jButtonLoadSessionsActionPerformed

    private void AddSelectedPaSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSelectedPaSessionActionPerformed
        // TODO add your handling code here:
         TableModel model = jTable_Parallel_1.getModel();
        int[] indexes = jTable_Parallel_1.getSelectedRows();
        Object[] row = new Object[9];
         DefaultTableModel tm = (DefaultTableModel)jTable_parallel_2.getModel();
         
         for (int i = 0; i < indexes.length; i++){
             row[0] = model.getValueAt(indexes[i], 0);
             row[1] = model.getValueAt(indexes[i], 1);
             row[2] = model.getValueAt(indexes[i], 2);
             row[3] = model.getValueAt(indexes[i], 3);
             row[4] = model.getValueAt(indexes[i], 4);
             row[5] = model.getValueAt(indexes[i], 5);
             row[6] = model.getValueAt(indexes[i], 6);
             row[7] = model.getValueAt(indexes[i], 7);
             row[8] = model.getValueAt(indexes[i], 8);
             tm.addRow(row);        
         }
    }//GEN-LAST:event_AddSelectedPaSessionActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
         DefaultTableModel model = (DefaultTableModel)jTable_parallel_2.getModel();
        
        if(model.getRowCount()== 0){
             JOptionPane.showMessageDialog(this,"Table is empty.Add Consecutive sessions befor save");
             
        }else{
         String id,lec1,lec2,subCode,sub,tag,gId,sCount,duration;
               String sessionID = jTextFieldParallel.getText();
               
                    Connection conn;
             try {
                 conn = Database.getConnection();
                 
                 for(int i=0;i< model.getRowCount();i++){
               
                 
                    id = model.getValueAt(i, 0).toString();
                    lec1 = model.getValueAt(i, 1).toString();
                    lec2 = model.getValueAt(i, 2).toString();
                    subCode = model.getValueAt(i, 3).toString();
                    sub = model.getValueAt(i, 4).toString();
                    tag = model.getValueAt(i, 5).toString();
                    gId = model.getValueAt(i, 6).toString();
                    sCount = model.getValueAt(i, 7).toString();
                    duration = model.getValueAt(i, 8).toString();
                    // sessionID = model.getValueAt(i, 8).toString();

                   // insert query
                  
                    String query ="insert into parallel_sessions(id,lecturer_1,lecturer_2,subject_code,subject,tag,group_id,student_count,duration,sessionId) values(?,?,?,?,?,?,?,?,?,?)";

                
                     pst = conn.prepareStatement(query);
                     pst.setString(1, id);
                     pst.setString(2, lec1);
                     
                     if(lec2.isEmpty()){
                         pst.setString(3, null);
                     }else{
                        pst.setString(3, lec2); 
                     }
                     pst.setString(4, subCode);
                     pst.setString(5, sub);
                     pst.setString(6, tag);
                     pst.setString(7, gId);
                     pst.setString(8, sCount);
                     pst.setString(9, duration);
                     
                     if(sessionID.isEmpty()){
                         pst.setString(10, null);
                     }else{
                         pst.setString(10, sessionID);
                     }
                    
                     pst.execute();
                 }
                  JOptionPane.showMessageDialog(this,"Data inserted successfully");
                 //clear jtable
                   model.setRowCount(0);
             } catch (Exception ex) {
                 Logger.getLogger(Sessions_allocations.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this,ex);

             }
                   
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed
//delete selcted parallel sessions
    private void jButtonDeleteSelected_ParallelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteSelected_ParallelActionPerformed
        // TODO add your handling code here:
          DefaultTableModel model = (DefaultTableModel)jTable_parallel_2.getModel();
        //get indexes of selected rows
        try{
           int rowIndex = jTable_parallel_2.getSelectedRow();
            if(rowIndex == -1){
               JOptionPane.showMessageDialog(this,"Plese select row before delete");
           }else{
           model.removeRow(rowIndex);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
    }//GEN-LAST:event_jButtonDeleteSelected_ParallelActionPerformed

    private void jButtonClear_ParallelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClear_ParallelActionPerformed
        // TODO add your handling code here:
        jTable_parallel_2.setModel(new DefaultTableModel(null,new String[]{"ID","Lecturer 1","Lecturer 2","Sub_code","Subject","Tag","Group id","Stu_count","Duration"}));
    }//GEN-LAST:event_jButtonClear_ParallelActionPerformed

    private void jButtonload_not_overlappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonload_not_overlappingActionPerformed
        // TODO add your handling code here:
         try{
        
            ResultSet rs= Database.getData("Select * from session");
            DefaultTableModel tm = (DefaultTableModel)jTableNotOverlapping_1.getModel();
            tm.setRowCount(0);
            
            
             Object[] column = new Object[9];
            while(rs.next()){
                
             
             column[0] = rs.getInt("id");
             column[1] =  rs.getString("lecturer_1");
             column[2] =  rs.getString("lecturer_2");
             column[3] =  rs.getString("subject_code");
             column[4] =  rs.getString("subject");
             column[5] =  rs.getString("tag");
             column[6] =  rs.getString("group_id");
             column[7] =  rs.getString("student_count");
             column[8] =  rs.getString("duration");
             
           
             tm.addRow(column);
            }
      
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
            System.out.println(e);
            }
    }//GEN-LAST:event_jButtonload_not_overlappingActionPerformed
//Add selected not overlapping row 
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         TableModel model = jTableNotOverlapping_1.getModel();
        int[] indexes = jTableNotOverlapping_1.getSelectedRows();
        Object[] row = new Object[9];
         DefaultTableModel tm = (DefaultTableModel)jTableNotOverlapping_2.getModel();
         
         for (int i = 0; i < indexes.length; i++){
             row[0] = model.getValueAt(indexes[i], 0);
             row[1] = model.getValueAt(indexes[i], 1);
             row[2] = model.getValueAt(indexes[i], 2);
             row[3] = model.getValueAt(indexes[i], 3);
             row[4] = model.getValueAt(indexes[i], 4);
             row[5] = model.getValueAt(indexes[i], 5);
             row[6] = model.getValueAt(indexes[i], 6);
             row[7] = model.getValueAt(indexes[i], 7);
             row[8] = model.getValueAt(indexes[i], 8);
             tm.addRow(row);        
         }
    }//GEN-LAST:event_jButton3ActionPerformed
//delete selected Not overlapping row
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel)jTableNotOverlapping_2.getModel();
        //get indexes of selected rows
        try{
           int rowIndex = jTableNotOverlapping_2.getSelectedRow();
            if(rowIndex == -1){
               JOptionPane.showMessageDialog(this,"Plese select row before delete");
           }else{
           model.removeRow(rowIndex);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
         jTableNotOverlapping_2.setModel(new DefaultTableModel(null,new String[]{"ID","Lecturer 1","Lecturer 2","Sub_code","Subject","Tag","Group id","Stu_count","Duration"}));
    }//GEN-LAST:event_jButton6ActionPerformed
//add consecutive 
    private void jButtonSave_consecutiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSave_consecutiveActionPerformed
        // TODO add your handling code here:
       
        DefaultTableModel model = (DefaultTableModel)consecutive_table.getModel();
        
        if(model.getRowCount()== 0){
             JOptionPane.showMessageDialog(this,"Table is empty.Add Consecutive sessions befor save");
             
        }else{
            
            
           try {
               
               String id,lec1,lec2,subCode,sub,tag,gId,sCount,duration;
               String sessionID = session_id.getText();
               
                    Connection conn = Database.getConnection();
                    
                    
                 for(int i=0;i< model.getRowCount();i++){
               
                 
                    id = model.getValueAt(i, 0).toString();
                    lec1 = model.getValueAt(i, 1).toString();
                    lec2 = model.getValueAt(i, 2).toString();
                    subCode = model.getValueAt(i, 3).toString();
                    sub = model.getValueAt(i, 4).toString();
                    tag = model.getValueAt(i, 5).toString();
                    gId = model.getValueAt(i, 6).toString();
                    sCount = model.getValueAt(i, 7).toString();
                    duration = model.getValueAt(i, 8).toString();
                    // sessionID = model.getValueAt(i, 8).toString();

                   // insert query
                  
                    String query ="insert into consecutive(id,lecturer_1,lecturer_2,subject_code,subject,tag,group_id,student_count,duration,sessionId) values(?,?,?,?,?,?,?,?,?,?)";

                
                     pst = conn.prepareStatement(query);
                     pst.setString(1, id);
                     pst.setString(2, lec1);
                     
                     if(lec2.isEmpty()){
                         pst.setString(3, null);
                     }else{
                        pst.setString(3, lec2); 
                     }
                     pst.setString(4, subCode);
                     pst.setString(5, sub);
                     pst.setString(6, tag);
                     pst.setString(7, gId);
                     pst.setString(8, sCount);
                     pst.setString(9, duration);
                     
                     if(sessionID.isEmpty()){
                         pst.setString(10, null);
                     }else{
                         pst.setString(10, sessionID);
                     }
                    
                     pst.execute();
               
                   
                     
                    
            }
                  
                 JOptionPane.showMessageDialog(this,"Data inserted successfully");
                 //clear jtable
                   model.setRowCount(0);
                    
                } catch (Exception e) {
                  JOptionPane.showMessageDialog(this,e);
                }
            
        }
    }//GEN-LAST:event_jButtonSave_consecutiveActionPerformed

    private void session_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_session_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_session_idActionPerformed
//load consecutive sessions
    private void jButtonLoadConsecutive_sessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadConsecutive_sessionsActionPerformed
        // TODO add your handling code here:
        
        try{
        
            ResultSet rs= Database.getData("Select * from consecutive");
            DefaultTableModel tm = (DefaultTableModel)jTableConsSessions.getModel();
            tm.setRowCount(0);
            
            
             Object[] column = new Object[10];
            while(rs.next()){
                
             
             column[0] = rs.getInt("id");
             column[1] =  rs.getString("lecturer_1");
             column[2] =  rs.getString("lecturer_2");
             column[3] =  rs.getString("subject_code");
             column[4] =  rs.getString("subject");
             column[5] =  rs.getString("tag");
             column[6] =  rs.getString("group_id");
             column[7] =  rs.getString("student_count");
             column[8] =  rs.getString("duration");
             column[9] =  rs.getString("sessionId");
             
           
             tm.addRow(column);
            }
      
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
            System.out.println(e);
            }
    }//GEN-LAST:event_jButtonLoadConsecutive_sessionsActionPerformed
//load parallel sessions
    private void jButtonload_parallelSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonload_parallelSessionsActionPerformed
        // TODO add your handling code here:
        
        try{
        
            ResultSet rs= Database.getData("Select * from parallel_sessions");
            DefaultTableModel tm = (DefaultTableModel)jTableParallelSessions.getModel();
            tm.setRowCount(0);
            
            
             Object[] column = new Object[10];
            while(rs.next()){
                
             
             column[0] = rs.getInt("id");
             column[1] =  rs.getString("lecturer_1");
             column[2] =  rs.getString("lecturer_2");
             column[3] =  rs.getString("subject_code");
             column[4] =  rs.getString("subject");
             column[5] =  rs.getString("tag");
             column[6] =  rs.getString("group_id");
             column[7] =  rs.getString("student_count");
             column[8] =  rs.getString("duration");
             column[9] =  rs.getString("sessionId");
             
           
             tm.addRow(column);
            }
      
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
            System.out.println(e);
            }
        
    }//GEN-LAST:event_jButtonload_parallelSessionsActionPerformed
//load not overlapping sessions
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          try{
        
            ResultSet rs= Database.getData("Select * from not_overlapping_sessions");
            DefaultTableModel tm = (DefaultTableModel)jTableNotoverlapping.getModel();
            tm.setRowCount(0);
            
            
             Object[] column = new Object[10];
            while(rs.next()){
                
             
             column[0] = rs.getInt("id");
             column[1] =  rs.getString("lecturer_1");
             column[2] =  rs.getString("lecturer_2");
             column[3] =  rs.getString("subject_code");
             column[4] =  rs.getString("subject");
             column[5] =  rs.getString("tag");
             column[6] =  rs.getString("group_id");
             column[7] =  rs.getString("student_count");
             column[8] =  rs.getString("duration");
             column[9] =  rs.getString("sessionId");
             
           
             tm.addRow(column);
            }
      
    }catch(Exception e){
            JOptionPane.showMessageDialog(this,e);
            System.out.println(e);
            }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel)jTableNotOverlapping_2.getModel();
        
        if(model.getRowCount()== 0){
             JOptionPane.showMessageDialog(this,"Table is empty.Add Consecutive sessions befor save");
             
        }else{
         String id,lec1,lec2,subCode,sub,tag,gId,sCount,duration;
               String sessionID = jTextFieldSession.getText();
               
                    Connection conn;
             try {
                 conn = Database.getConnection();
                 
                 for(int i=0;i< model.getRowCount();i++){
               
                 
                    id = model.getValueAt(i, 0).toString();
                    lec1 = model.getValueAt(i, 1).toString();
                    lec2 = model.getValueAt(i, 2).toString();
                    subCode = model.getValueAt(i, 3).toString();
                    sub = model.getValueAt(i, 4).toString();
                    tag = model.getValueAt(i, 5).toString();
                    gId = model.getValueAt(i, 6).toString();
                    sCount = model.getValueAt(i, 7).toString();
                    duration = model.getValueAt(i, 8).toString();
                    // sessionID = model.getValueAt(i, 8).toString();

                   // insert query
                  
                    String query ="insert into not_overlapping_sessions(id,lecturer_1,lecturer_2,subject_code,subject,tag,group_id,student_count,duration,sessionId) values(?,?,?,?,?,?,?,?,?,?)";

                
                     pst = conn.prepareStatement(query);
                     pst.setString(1, id);
                     pst.setString(2, lec1);
                     
                     if(lec2.isEmpty()){
                         pst.setString(3, null);
                     }else{
                        pst.setString(3, lec2); 
                     }
                     pst.setString(4, subCode);
                     pst.setString(5, sub);
                     pst.setString(6, tag);
                     pst.setString(7, gId);
                     pst.setString(8, sCount);
                     pst.setString(9, duration);
                     
                     if(sessionID.isEmpty()){
                         pst.setString(10, null);
                     }else{
                         pst.setString(10, sessionID);
                     }
                    
                     pst.execute();
                  }
                 JOptionPane.showMessageDialog(this,"Data inserted successfully");
                 //clear jtable
                   model.setRowCount(0);
                 
             } catch (Exception ex) {
                 
                 Logger.getLogger(Sessions_allocations.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this,ex);
             }
                 
            
                 
        }
    }//GEN-LAST:event_jButton7ActionPerformed


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSelectedPaSession;
    private javax.swing.JButton LoadSessions1;
    private javax.swing.JTable consecutive_table;
    private javax.swing.JButton delete_selectedRow;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton1ClearConsecutiveSessions;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonClear_Parallel;
    private javax.swing.JButton jButtonDeleteSelected_Parallel;
    private javax.swing.JButton jButtonLoadConsecutive_sessions;
    private javax.swing.JButton jButtonLoadSessions;
    private javax.swing.JButton jButtonSave_consecutive;
    private javax.swing.JButton jButtonload_not_overlapping;
    private javax.swing.JButton jButtonload_parallelSessions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableConsSessions;
    private javax.swing.JTable jTableNotOverlapping_1;
    private javax.swing.JTable jTableNotOverlapping_2;
    private javax.swing.JTable jTableNotoverlapping;
    private javax.swing.JTable jTableParallelSessions;
    private javax.swing.JTable jTable_Parallel_1;
    private javax.swing.JTable jTable_parallel_2;
    private javax.swing.JTextField jTextFieldParallel;
    private javax.swing.JTextField jTextFieldSession;
    private javax.swing.JTextField session_id;
    private javax.swing.JButton tranfer_Consecutive_rows;
    // End of variables declaration//GEN-END:variables
}
